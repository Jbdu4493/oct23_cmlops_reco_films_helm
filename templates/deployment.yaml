apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "reco-film.fullname" . }}
  labels:
    {{- include "reco-film.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "reco-film.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "reco-film.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "reco-film.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          env:
          - name: SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: mysecret
                key: SECRET_KEY
          - name: ALGORITHM
            valueFrom:
              secretKeyRef:
                name: mysecret
                key: ALGORITHM          
          - name: ACCESS_TOKEN_EXPIRATION
            valueFrom:
              secretKeyRef:
                name: mysecret
                key: ACCESS_TOKEN_EXPIRATION
          - name: DBNAME
            valueFrom:
              secretKeyRef:
                name: mysecret
                key: DBNAME
          - name: USER
            valueFrom:
              secretKeyRef:
                name: mysecret
                key: USER          
          - name: PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysecret
                key: PASSWORD
          - name: HOST
            valueFrom:
              secretKeyRef:
                name: mysecret
                key: HOST
          - name: PORT
            valueFrom:
              secretKeyRef:
                name: mysecret
                key: PORT
          envFrom:
          - configMapRef:
              name:  
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- with .Values.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- with .Values.volumes }}
      volumes:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
